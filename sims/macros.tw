:: _each_macro [script]
macros.add('each', {
    version: [1, 0, 0],
    tags: null,
    handler: function() {
        var ary = eval(Wikifier.parse(this.args[0]))
        var iterator_key = 'i';
        if (this.args.length > 1) {
            iterator_key = this.args[1]
        }
        var object_key = 'o'
        if (this.args.length > 2) {
            object_key = this.args[2]
        }
        var old_o = state.active.variables[object_key]
        var old_i = state.active.variables[iterator_key]
        for (var i = 0, len = ary.length; i < len; i++) {
            state.active.variables.o = ary[i]
            state.active.variables.i = i
            new Wikifier(this.output, this.payload[0].contents)
        }
        state.active.variables[iterator_key] = old_i
        state.active.variables[object_key] = old_o
    }
}, false)

:: _on_of_macro [script]
macros.add('random', {
    tags: ['or'],
    handler: function() {
        new Wikifier(this.output, this.payload.random().contents)
    }
})

:: _dynamic_display_macro [script]
//Dynamic display: eval the args then <<display>> that
macros.add('dyn_display', {
    handler: function() {
        var target = eval(this.args.full)
        new Wikifier(this.output, "<<display " + target + ">>")
    }
})

::_scripts [script]
window.atrophy_needs = function() {
    var vars = state.active.variables
    vars.funny_need -= Math.floor(Math.random() * 10)
    vars.sex_need -= Math.floor(Math.random() * 10)
    vars.hope_need -= Math.floor(Math.random() * 10)
    vars.anger_need -= Math.floor(Math.random() * 10)
    vars.things_need -= Math.floor(Math.random() * 10)

    vars.friends.forEach(function(friend) {
        if (friend.dead) {
            friend.rotting = true
        }
    })

    if (vars.pregnant === true) {
        vars.pregnant_counter += 1
    }
}

window.player_dead = function() {
    var vars = state.active.variables
    return vars.funny_need <= 0 || vars.hope_need <= 0 || vars.anger_need <= 0 || vars.things_need <= 0
}

window.add_need = function(need, value) {
    state.active.variables[need] += value
    if (state.active.variables[need] > 100) {
        state.active.variables[need] = 100
    }
}

window._window_cclick_contexts = []
window._window_cclick_ids = 0

macros.add('closure-click', {
    tags: null,
    handler: function() {
        context = {
            id: _window_cclick_ids += 1,
            vars: state.active.variables
        }
        _window_cclick_contexts.push(context)
        container = "<<click " + this.args.raw + ">>"
        container += "<<set _window_cclick_stash = state.active.variables>>"
        container += "<<set state.active.variables = _window_cclick_contexts[" + context.id + "]>>"
        container += this.payload[0]
        container += "<</click>>"
    }
})

//Usage: <<stamp $var>> finds any instance of $var and replaces it with its evaluated version
macros.add('stamp', {
    tags: null,
    handler: function() {
        var text = this.payload[0].contents.replace(this.args.raw, function(str){eval(Wikifier.parse(str));console.log(Wikifier.parse(str))})
        console.log(text)
        new Wikifier(this.output, text)
    }
})

macros.add('notify', {
    tags: null,
    handler: function() {
        var payload = "<div class='attention'>"
        payload += this.payload[0].contents
        payload += "</div>"
        new Wikifier(this.output, payload)
    }
})

macros.add('ProTip', {
    tags: null,
    handler: function() {
        var payload = "<div class='protip'><table><tr><td><img src='art/lightbulb_icon.png'></td><td style='vertical-align: center'>"
        payload += this.payload[0].contents
        payload += "</td></tr></table></div>"
        new Wikifier(this.output, payload)
    }
})

macros.add('first', {
    tags: ['then'],
    handler: function() {
        var vars = state.active.variables
        var iterator = vars[state.active.title + "_first_iterator"] || 0
        if (iterator > this.payload.length) {
            iterator = this.payload.length - 1
        }
        vars[state.active.title + "_first_iterator"] = iterator + 1
        new Wikifier(this.output, this.payload[iterator].contents)
    }
})

macros.add('switch', {
    tags: ['when', 'else'],
    handler: function() {
        var iter = eval(this.args[0])
        var payload = null
        for (var i = 0; i < this.payload.length; i++) {
            if (this.payload[i].name == 'switch') continue;
            if (eval(this.payload[i].arguments) === iter || (payload == null && this.payload[i].name === 'else')) {
                payload = this.payload[i]
            }
        }
        new Wikifier(this.output, payload.contents)
    }
})

window.need_name = function(id) {
    return {
        'things_need': 'Thing Need',
        'sex_need': 'Sex Need',
        'anger_need': 'Anger Need',
        'hope_need': 'Hope Need',
        'funny_need': 'Humor Need'
    }[id]
}

window.random_need = function() {
    return [
        "things_need",
        "anger_need",
        "sex_need",
        "hope_need",
        "funny_need"
    ].random()
}

macros.add('display_need', {
    handler: function() {
        var value = state.active.variables[this.args[0]]
        var pips = value / 20
        var output = "<span title='" + need_value_name(this.args[0], value) + "' class='green_pips'>"
        for (var i = 0; i < pips; i++) {
            output += "|"
        }
        output += "</span><span class='red_pips'>"
        for (var i = pips; i < 5; i++) {
            output += "|"
        }
        output += "</span>"
        new Wikifier(this.output, output)
    }
})

window.need_value_names = {
    'hope_need': [
        'Hopeless',
        'Despondent',
        'Sad',
        'Fulfilled',
        'Self Actualized'
    ],
    'sex_need': [
        'Slavering',
        'Horny',
        'Randy',
        'Piqued',
        'Slaked'
    ],
    'funny_need': [
        'Earnest',
        'Serious',
        'Funny',
        'Silly',
        'Goofy'
    ],
    'anger_need': [
        'Blind',
        'Angry',
        'Annoyed',
        'Calm',
        'Serene'
    ],
    'things_need': [
        'Thonged',
        'Hibbic',
        'Finched',
        'Nodded',
        'Gimbal'
    ]
}

window.need_value_name = function(need_id, value) {
    return window.need_value_names[need_id][Math.floor((value - 1) / 20)];
}

macros.add('display_some_of', {
    tags: ['and_or'],
    handler: function() {
        //Prevent no passages from displaying
        var displayed = 0
        for (var i = 0; i < this.payload.length; i++) {
            if (Math.random() < .5) {
                new Wikifier(this.output, this.payload[i].contents)
                displayed += 1
            }
        }
        if (displayed === 0) {
            new Wikifier(this.output, this.payload.random().contents)
        }
    }
})

:: _thing_relationship_widgets [widget]
<<widget AddRelationship>>
<<set $args[0] to (typeof $args[0] === 'string' ? thing_by_id($args[0]) : $args[0])>>\
<<run add_relationship($args[0], $args[1])>>\
Your relationship level with <<print $args[0].name>> is now <<print get_relationship_name($args[0].relationship)>>.\
<</widget>>

<<widget AddNeed>>\
<<run add_need($args[0], $args[1])>>\
You gain <<print $args[1]>> <<print need_name($args[0])>>.\
<</widget>>\

::need_words [script]
window.need_name
